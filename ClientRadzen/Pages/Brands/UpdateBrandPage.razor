@page "/UpdateBrand/{BrandId:guid}"

<PageTitle>Update Brand</PageTitle>

<RadzenStack Orientation="Orientation.Vertical">
    <RadzenRow>
        <RadzenText TextStyle="TextStyle.DisplayH5" Text="@($"Update Brand {Model.Name}")"></RadzenText>
    </RadzenRow>
    <RadzenRow>
        <RadzenColumn SizeXS="8" SizeSM="4">
            <RadzenStack Orientation="Orientation.Vertical">
                <EditForm Model="@Model" OnValidSubmit="ValidateAsync">
                    <FluentValidationValidator @ref="_fluentValidationValidator" />

                    <RadzenFormField Text="Name" Style="width: 100%;">
                        <RadzenTextArea Rows="2" @bind-Value=@Model.Name class="w-100"
                                        @oninput="@((arg)=>Model.ChangeName(arg.Value!.ToString()!))"
                                        Name="name" />

                    </RadzenFormField>
                    <ValidationMessage For="() => Model.Name" style="color:red; font-size:x-small;" />

                </EditForm>
            </RadzenStack>
        </RadzenColumn>

    </RadzenRow>
    <RadzenRow>
        <RadzenStack Orientation="Orientation.Horizontal">
            <RadzenButton ButtonStyle=ButtonStyle.Primary ButtonType=ButtonType.Submit Click="SaveAsync" Disabled=@NotValidated
                          MouseEnter="@(args =>MainApp.ShowTooltip(args,$"Create",TooltipPosition.Top) )">Update</RadzenButton>
            <RadzenButton ButtonStyle=ButtonStyle.Primary Variant="Variant.Outlined" Click="CancelAsync"
                          MouseEnter="@(args => MainApp.ShowTooltip(args,$"Cancel",TooltipPosition.Top) )">Cancel</RadzenButton>
        </RadzenStack>

    </RadzenRow>
</RadzenStack>

 @code {
    void ChangeName(string name)
    {
        Model.Name = name;


    }
    void NotifyMessage(NotificationSeverity Severity, string Leyend, List<string> messages)
    {
        AlertStyle alertStyle = Severity == NotificationSeverity.Success ? AlertStyle.Success : AlertStyle.Danger;

        NotificationService.Notify(new NotificationMessage
            {
                Severity = Severity,
                SummaryContent = ns =>@<RadzenText TextStyle="TextStyle.H6">@Leyend</RadzenText>,
            DetailContent = ns =>@<SimpleAlertMessage AlertStyle="@alertStyle" Messages=@messages></SimpleAlertMessage>,


            Duration = Severity == NotificationSeverity.Success ? 2000 : 4000,
        });

    }
    void ShowTooltip(ElementReference elementReference, string text) =>
      TooltipService.Open(elementReference, text, new TooltipOptions() { Position = TooltipPosition.Right });
}

