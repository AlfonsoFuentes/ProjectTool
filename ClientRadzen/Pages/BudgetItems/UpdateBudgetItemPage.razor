@page "/UpdateBudgetItem/{Id:guid}"
<PageTitle>Update Item @Model.Name</PageTitle>

    <RadzenStack Orientation="Orientation.Vertical">
        <RadzenRow>
            <RadzenText TextStyle="TextStyle.DisplayH5" Text="@($"Update Item: {Model.Name} in MWO: {Model.MWOName}")"></RadzenText>
        </RadzenRow>
        <EditForm Model="@Model" OnValidSubmit="ValidateAsync">
            <FluentValidationValidator @ref="_fluentValidationValidator" />
            <RadzenRow>
                <RadzenColumn SizeXS="8" SizeSM="4">
                    <RadzenFormField Text="Type" Style="width: 100%;">
                        <RadzenDropDown @bind-Value=@Model.Type Data=@BudgetItemTypeEnum.ListForCreateItem Style="width: 100%;"
                                        Disabled=@(Model.Type != BudgetItemTypeEnum.None)
                                        AllowClear=true
                                        FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.StartsWith"
                                        AllowFiltering="true"
                                        Name="type" TextProperty="Name"
                                        TValue="BudgetItemTypeEnum" />
                    </RadzenFormField>
                </RadzenColumn>
            </RadzenRow>
            @if (Model.Type != BudgetItemTypeEnum.None)
        {

            <RadzenRow>
                <RadzenColumn SizeXS="8" SizeSM="4">
                    <RadzenFormField Text="Name" Style="width: 100%;">
                        <RadzenTextArea @bind-Value=@Model.Name class="w-100" Rows="2"
                                        @oninput=@(args =>Model.ChangeName(args.Value!.ToString()!)) Name="name" />
                    </RadzenFormField>
                    <ValidationMessage For="() => Model.Name" style="color:red; font-size:x-small;" />
                </RadzenColumn>
                @if (Model.IsEquipmentData)
                {
                    <RadzenColumn SizeXS="8" SizeSM="4">
                        <RadzenStack Orientation="Orientation.Horizontal">
                            <RadzenColumn Size="12" SizeLG="7">
                                <RadzenFormField Text="Brand" Style="width: 100%;">
                                    <RadzenDropDown @bind-Value=@Model.Brand Data=@Brands Style="width: 100%;"
                                                    AllowClear=true
                                                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.StartsWith"
                                                    AllowFiltering="true"
                                                    Name="brand" TextProperty="Name"
                                                    TValue="BrandResponse" />
                                </RadzenFormField>
                            </RadzenColumn>
                            <RadzenColumn Size="12" SizeLG="5">
                                <RadzenButton Text="Add Brand" Icon="store" Click="CreateBrand" Style="width: 100%;" class="mt-2"></RadzenButton>
                            </RadzenColumn>
                        </RadzenStack>

                    </RadzenColumn>
                }
                else if (Model.IsTaxesData)
                {
                    <RadzenColumn SizeXS="8" SizeSM="4">
                        @if (Response.BudgetItemsToApplyTaxes.Count == 0)
                        {
                            <AlertMessage Message="There is no items to apply Taxes"></AlertMessage>
                        }
                        else
                        {
                            <RadzenFormField Text="Sum taxes applied, USD" Style="width: 100%;">
                                <RadzenNumeric ShowUpDown="false" Value=@Model.SumBudgetTaxes class="w-100" TValue=double
                                               Name="Budget" Disabled=true />

                            </RadzenFormField>
                        }
                    </RadzenColumn>
                }

            </RadzenRow>
            @if (Model.IsRegularData || Model.IsEquipmentData || Model.IsAlteration)
            {
                <RadzenRow>
                    <RadzenColumn SizeXS="8" SizeSM="4">
                        <RadzenFormField Text="Quantity" Style="width: 100%;">
                            <RadzenNumeric @bind-Value=@Model.Quantity class="w-100" TValue=double ShowUpDown=false
                                           InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "enter value" }})"
                                           Name="Quantity" @oninput=@(args =>Model.ChangeQuantity(args.Value!.ToString()!)) />

                        </RadzenFormField>
                    </RadzenColumn>
                    @if (Model.IsEquipmentData)
                    {
                        <RadzenColumn SizeXS="8" SizeSM="4">
                            <RadzenFormField Text="Model" Style="width: 100%;">
                                <RadzenTextBox @bind-Value=@Model.Model class="w-100" Name="Model" />
                            </RadzenFormField>
                        </RadzenColumn>
                    }


                </RadzenRow>
                <RadzenRow>
                    <RadzenColumn SizeXS="8" SizeSM="4">
                        <RadzenFormField Text="Unitary Cost, USD" Style="width: 100%;">
                            <RadzenNumeric ShowUpDown="false" @bind-Value=@Model.UnitaryCost class="w-100" TValue=double
                                           InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "enter value" }})"
                                           Name="UnitaryCost" @oninput=@(args =>Model.ChangeUnitaryCost(args.Value!.ToString()!)) />

                        </RadzenFormField>
                    </RadzenColumn>
                    @if (Model.IsEquipmentData)
                    {
                        <RadzenColumn SizeXS="8" SizeSM="4">
                            <RadzenFormField Text="Reference" Style="width: 100%;">
                                <RadzenTextBox @bind-Value=@Model.Reference class="w-100" Name="Reference" />
                            </RadzenFormField>
                        </RadzenColumn>
                    }
                </RadzenRow>
            }
            @if (Model.IsEquipmentData)
            {
                <RadzenRow>
                    <RadzenColumn SizeXS="8" SizeSM="4">
                        <RadzenLabel Text="Is Existing in Plant?" Component="True" />
                        <RadzenSwitch @bind-Value=@Model.Existing
                                      InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "Switch value" }})"></RadzenSwitch>
                    </RadzenColumn>
                </RadzenRow>
            }

            @if (Model.IsEngineeringData)
            {
                <RadzenRow>
                    <RadzenColumn SizeXS="8" SizeSM="4">
                        <RadzenFormField Text="Budget, USD" Style="width: 100%;">
                            <RadzenNumeric ShowUpDown="false" Value=@Model.UnitaryCost class="w-100" TValue=double
                                           InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "enter value" }})"
                                           Name="Percentage" @oninput=@(args =>Model.ChangeBudget(args.Value!.ToString()!)) />

                        </RadzenFormField>
                    </RadzenColumn>
                </RadzenRow>
            }

            <RadzenRow>
                <RadzenColumn SizeXS="8" SizeSM="4">
                    <RadzenFormField Text="Budget, USD" Style="width: 100%;">
                        <RadzenText class="rz-p-2"> @($"{String.Format(new System.Globalization.CultureInfo("en-US"), "{0:C}", Model.Budget)}")</RadzenText>


                    </RadzenFormField>
                    <ValidationMessage For="() => Model.Budget" style="color:red; font-size:x-small;" />
                </RadzenColumn>
                @if (Model.IsTaxesData)
                {
                    <RadzenColumn SizeXS="8" SizeSM="4">
                        <RadzenFormField Text="Percentage" Style="width: 100%;">
                            <RadzenNumeric ShowUpDown="false" Value=@Model.Percentage class="w-100" TValue=double
                                           Max=100 Min=0
                                           InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "enter value" }})"
                                           Name="Percentage" @oninput=@(args =>Model.ChangePercentage(args.Value!.ToString()!)) />

                        </RadzenFormField>

                    </RadzenColumn>

                }
            </RadzenRow>
            @if (Model.IsTaxesData)
            {
                <RadzenRow>
                    <RadzenColumn SizeXS="8" SizeSM="4">

                    </RadzenColumn>
                    <RadzenColumn SizeXS="8" SizeSM="4">
                        <RadzenText Text="Items to apply taxes" Style="width: 100%;"></RadzenText>
                        <RadzenListBox AllowFiltering=true @bind-Value=@Model.BudgetItemDtos Data="@Model.BudgetItemDtos"
                                       TextProperty="Name" TValue="List<BudgetItemDto>"
                                       Multiple=true AllowClear=true Placeholder="Select items" Style="width: 100%;  height: 200px"
                                       Change="Model.ChangeTaxesItemList"
                                       InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "select items" }})" />
                    </RadzenColumn>
                </RadzenRow>
            }
        }
    </EditForm>

    <RadzenRow>
        <RadzenStack Orientation="Orientation.Horizontal">
            <RadzenButton ButtonStyle=ButtonStyle.Primary ButtonType=ButtonType.Submit Disabled=@NotValidated Click="SaveAsync"
                          MouseEnter="@(args => MainApp.ShowTooltip(args,$"Update",TooltipPosition.Top) )">Save</RadzenButton>
            <RadzenButton ButtonStyle=ButtonStyle.Primary Variant="Variant.Outlined" Click="CancelAsync"
                          MouseEnter="@(args => MainApp.ShowTooltip(args,$"Cancel",TooltipPosition.Top) )">Cancel</RadzenButton>
        </RadzenStack>

    </RadzenRow>
</RadzenStack>
@code {
    
}
