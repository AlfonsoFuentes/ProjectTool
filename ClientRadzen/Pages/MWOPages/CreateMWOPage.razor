@page "/CreateMWO"

<PageTitle>Create New MWO</PageTitle>

<RadzenStack Orientation="Orientation.Vertical">
    <RadzenRow>
        <RadzenText TextStyle="TextStyle.DisplayH5" Text="@($"Create MWO")"></RadzenText>
    </RadzenRow>

    <RadzenRow>
        <RadzenColumn SizeXS="8" SizeSM="4">
            <RadzenStack Orientation="Orientation.Vertical">
            
                   
                    <RadzenFormField Text="Name" Style="width: 100%;">
                        <RadzenTextBox @bind-Value=@Model.Name AutoComplete class="w-100"
                                        @oninput="@((arg)=>Model.ChangeName(arg.Value!.ToString()!))"
                                        Name="name" />

                     </RadzenFormField>
           

                     <RadzenFormField Text="Type" Style="width: 100%;">
                         <RadzenDropDown @bind-Value=@Model.Type Data=@MWOTypeEnum.List Style="width: 100%; "
                                         Name="type" TextProperty="Name" Change="@(()=>Model.ChangeType())"
                                         TValue="MWOTypeEnum" />
                     </RadzenFormField>
                
                     <RadzenFormField Text="Tax for Alterations" Style="width: 100%;">
                         <RadzenNumeric ShowUpDown=false @bind-Value=@Model.PercentageTaxForAlterations Style="width:100%"
                                        @oninput="@((arg)=>Model.ChangeTaxForAlterations(arg.Value!.ToString()!))"
                                        Name="TaxAlterations" />

                     </RadzenFormField>
               
                     <RadzenFormField Text="Capitalized Salaries" Style="width: 100%;">
                         <RadzenNumeric ShowUpDown=false @bind-Value=@Model.PercentageEngineering Style="width:100%"
                                        @oninput="@((arg)=>Model.ChangePercentageEngineering(arg.Value!.ToString()!))"
                                        Name="salaries" />

                     </RadzenFormField>

                     <RadzenFormField Text="Contingency" Style="width: 100%;">
                         <RadzenNumeric ShowUpDown=false @bind-Value=@Model.PercentageContingency Style="width:100%"
                                        @oninput="@((arg)=>Model.ChangePercentageContingency(arg.Value!.ToString()!))"
                                        Name="contingency" />

                     </RadzenFormField>
               
                     <RadzenLabel Text="Is Asset real Productive?" Component="True" />
                     <RadzenSwitch @bind-Value=@Model.IsAssetProductive
                                   InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "Switch value" }})"></RadzenSwitch>
                     @if (!Model.IsAssetProductive)
                    {
                        <RadzenFormField Text="Taxes No Productive" Style="width: 100%;">
                            <RadzenNumeric ShowUpDown=false @bind-Value=@Model.PercentageAssetNoProductive Style="width:100%"
                                           @oninput="@((arg)=>Model.ChangePercentageTaxes(arg.Value!.ToString()!))"
                                           Name="taxesnoproductive" />

                        </RadzenFormField>
                   


                    }
          
            </RadzenStack>
        </RadzenColumn>
         <RadzenColumn SizeXS="8" SizeSM="4">
             <AlertMessage Messages="Model.ValidationErrors"></AlertMessage>
         </RadzenColumn>
    </RadzenRow>
    <RadzenRow>
        <RadzenStack Orientation="Orientation.Horizontal">
            <RadzenButton ButtonStyle=ButtonStyle.Primary ButtonType=ButtonType.Submit Click="SaveAsync">Create</RadzenButton>
            <RadzenButton ButtonStyle=ButtonStyle.Primary Variant="Variant.Outlined" Click="CancelAsync">Cancel</RadzenButton>
        </RadzenStack>

    </RadzenRow>
</RadzenStack>

@code {
    void ChangeName(string name)
    {
        Model.Name = name;
    }
    void NotifyMessage(NotificationSeverity Severity, string Leyend, List<string> messages)
    {
        AlertStyle alertStyle = Severity == NotificationSeverity.Success ? AlertStyle.Success : AlertStyle.Danger;

        NotificationService.Notify(new NotificationMessage
            {
                Severity = Severity,
                SummaryContent = ns =>@<RadzenText TextStyle="TextStyle.H6">@Leyend</RadzenText>,
            DetailContent = ns =>@<SimpleAlertMessage AlertStyle="@alertStyle" Messages=@messages></SimpleAlertMessage>,


            Duration = Severity == NotificationSeverity.Success ? 2000 : 4000,
        });

    }
}
