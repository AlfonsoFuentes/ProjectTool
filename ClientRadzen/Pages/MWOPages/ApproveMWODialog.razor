@page "/ApproveMWO/{MWOId:guid}"

@using Client.Infrastructure.Managers.CostCenter


<RadzenStack Orientation="Orientation.Vertical">
    <RadzenRow>
        <RadzenText TextStyle="TextStyle.DisplayH5" Text="@($"Approve MWO: {Model.Name}")"></RadzenText>
    </RadzenRow>
    <RadzenRow>
        <AlertMessage Messages="@Model.ValidationErrors"></AlertMessage>
    </RadzenRow>
    <RadzenRow>
        <RadzenColumn SizeXS="8" SizeSM="4">
            <RadzenStack Orientation="Orientation.Vertical">
                <EditForm Model="@Model" OnValidSubmit="SaveAsync">
                    <FluentValidationValidator @ref="_fluentValidationValidator" />
                    <RadzenFormField Text="Name" Style="width: 100%;">
                        <RadzenTextBox @bind-Value=@Model.Name AutoComplete Style="width:100%"
                                        Name="name" @oninput="@((args)=>Model.ChangeName(args.Value!.ToString()!))" />

                     </RadzenFormField>
                     <ValidationMessage For="() => Model.Name" style="color:red; font-size:x-small;" />
                     <ValidationMessage For="() => Model.IsAbleToApproved" style="color:red; font-size:x-small;" />
                     <RadzenFormField Text="MWO Number" Style="width: 100%;">
                         <RadzenTextBox @bind-Value=@Model.MWONumber AutoComplete Style="width:100%"
                                        Name="number" @oninput="@((args)=>Model.ChangeMWONumber(args.Value!.ToString()!))" />

                     </RadzenFormField>
                     <ValidationMessage For="() => Model.MWONumber" style="color:red; font-size:x-small;" />
                     <RadzenFormField Text="Cost center" Style="width: 100%;">
                         <RadzenDropDown @bind-Value=@Model.CostCenter Data=@CostCenterEnum.List Style="width:100%"
                                         Name="costcenter" TextProperty="Name"
                                         TValue="CostCenterEnum" />

                     </RadzenFormField>
                     <ValidationMessage For="() => Model.CostCenter" style="color:red; font-size:x-small;" />
                     <RadzenFormField Text="Capitalized Salaries" Style="width: 100%;">
                         <RadzenNumeric ShowUpDown=false @bind-Value=@Model.PercentageEngineering Style="width:100%"
                                        @oninput="@((arg)=>Model.ChangePercentageEngineering(arg.Value!.ToString()!))"
                                        Name="salaries" />

                     </RadzenFormField>
                     <ValidationMessage For="() => Model.PercentageEngineering" style="color:red; font-size:x-small;" />
                     <RadzenFormField Text="Contingency" Style="width: 100%;">
                         <RadzenNumeric ShowUpDown=false @bind-Value=@Model.PercentageContingency Style="width:100%"
                                        @oninput="@((arg)=>Model.ChangePercentageContingency(arg.Value!.ToString()!))"
                                        Name="contingency" />

                     </RadzenFormField>
                     <ValidationMessage For="() => Model.PercentageContingency" style="color:red; font-size:x-small;" />
                     <RadzenLabel Text="Is Asset real Productive?" Component="True" />
                     <RadzenSwitch @bind-Value=@Model.IsAssetProductive
                                   InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "Switch value" }})"></RadzenSwitch>
                     @if (!Model.IsAssetProductive)
                    {
                        <RadzenFormField Text="Taxes No Productive" Style="width: 100%;">
                            <RadzenNumeric ShowUpDown=false @bind-Value=@Model.PercentageAssetNoProductive Style="width:100%"
                                           @oninput="@((arg)=>Model.ChangePercentageTaxes(arg.Value!.ToString()!))"
                                           Name="taxesnoproductive" />

                        </RadzenFormField>
                        <ValidationMessage For="() => Model.PercentageAssetNoProductive" style="color:red; font-size:x-small;" />

                    }

                </EditForm>
            </RadzenStack>


        </RadzenColumn>

    </RadzenRow>

    <RadzenRow>
        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End" Gap="0.5rem">
            <RadzenButton Click="@Cancel" Variant="Variant.Flat" ButtonStyle="ButtonStyle.Light" Text="Cancel" Style="width: 120px" />
            <RadzenButton ButtonType=ButtonType.Submit Click=SaveAsync Variant="Variant.Flat" Text="Approve" Style="width: 120px" />
        </RadzenStack>
    </RadzenRow>
</RadzenStack>
@code {
    [Inject]
    private IMWOService Service { get; set; } = null!;
    FluentValidationValidator _fluentValidationValidator = null!;
    [Parameter]
    public Guid MWOId { get; set; }

    public ApproveMWORequest Model { get; set; } = new();
    protected override async Task OnInitializedAsync()
    {
        var result = await Service.GetMWOByIdToApprove(MWOId);
        if (result.Succeeded)
        {
            Model = result.Data;
        }

    }

    public async Task SaveAsync()
    {
        if (await _fluentValidationValidator.ValidateAsync())
        {
            var result = await Service.ApproveMWO(Model);
            if (result.Succeeded)
            {
                NotificationService.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Success,
                        Summary = "Success",
                        Detail = result.Message,
                        Duration = 4000
                    });

                _NavigationManager.NavigateTo("/mwotable");
            }
            else
            {
                Model.ValidationErrors = result.Messages;
            }
        }


    }
    void Cancel()
    {
        _NavigationManager.NavigateTo("/mwotable");
    }
}
