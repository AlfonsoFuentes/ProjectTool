@page "/mwotable"
@using Shared.Models.MWO
<FluentToolbar id="toolbar-slotted-label">

    <FluentButton IconStart="@(new Icons.Filled.Size20.Add())" OnClick="AddNewMWO"></FluentButton>
    <FluentButton>Two</FluentButton>
    <FluentButton>Three</FluentButton>
</FluentToolbar>

<FluentDataGrid Items="@FilteredItems" ResizableColumns=true Pagination="@pagination" TGridItem="MWOResponse" OnRowFocus="HandleRowFocus"
                GridTemplateColumns="1fr 0.2fr 0.2fr 0.2fr 0.2fr 0.2fr" style="height: 405px; overflow:auto;">


    <TemplateColumn Title="Name" InitialSortDirection=SortDirection.Descending SortBy="@nameSort" IsDefaultSortColumn=true>
        <ColumnOptions>
            <div class="search-box">
                <FluentSearch type="search" Autofocus=true @bind-Value=nameFilter @oninput="HandleCountryFilter" @bind-Value:after="HandleClear"
                              Placeholder="MWO name..." />
            </div>
        </ColumnOptions>
        <ChildContent>
            @(context.Name)
        </ChildContent>
    </TemplateColumn>
    <PropertyColumn Property="@(c => c.Status)" Sortable="true" Align="Align.Center" Title="Status" />
    <PropertyColumn Property="@(c => c.Type)" Sortable="true" Align="Align.Center" />
    @if (CurrentUser.IsSuperAdmin)
    {
        <PropertyColumn Property="@(c => c.CreatedBy)" Sortable="false" Align="Align.Center" />
        <PropertyColumn Property="@(c => c.CreatedOn)" Sortable="false" Align="Align.Center" />
    }
    <TemplateColumn Title="Actions" Align="Align.End">
        <FluentButton IconStart="@(new Icons.Regular.Size12.Edit())" @onclick="@(() => Edit(context))"></FluentButton>
        <FluentButton IconStart="@(new Icons.Regular.Size12.Delete())" @onclick="@(() => Delete(context))"></FluentButton>
    </TemplateColumn>
</FluentDataGrid>


<FluentPaginator State="@pagination">
    <SummaryTemplate>
        There are <strong>@(pagination.TotalItemCount ?? 0)</strong> rows
    </SummaryTemplate>
    <PaginationTextTemplate>
        This is page <strong>@(pagination.CurrentPageIndex + 1)</strong> out of a total of <strong>@(pagination.LastPageIndex + 1)</strong> pages
    </PaginationTextTemplate>
</FluentPaginator>
@code {
    GridSort<MWOResponse> nameSort = GridSort<MWOResponse>.ByAscending(x => x.Name, StringLengthComparer.Instance);
    string nameFilter = string.Empty;
    PaginationState pagination = new PaginationState { ItemsPerPage = 10 };
    IQueryable<MWOResponse>? FilteredItems => OriginalData?.Where(x => x.Name.Contains(nameFilter, StringComparison.CurrentCultureIgnoreCase)).AsQueryable();

    private void HandleCountryFilter(ChangeEventArgs args)
    {
        if (args.Value is string value)
        {
            nameFilter = value;
        }
    }
    
    private void HandleClear()
    {
        if (string.IsNullOrWhiteSpace(nameFilter))
        {
            nameFilter = string.Empty;
        }
    }
    
    public class StringLengthComparer : IComparer<string>
    {
        public static readonly StringLengthComparer Instance = new StringLengthComparer();

        public int Compare(string? x, string? y)
        {
            if (x is null)
            {
                return y is null ? 0 : -1;
            }

            if (y is null)
            {
                return 1;
            }

            return x.Length.CompareTo(y.Length);
        }
    }

    private void HandleRowFocus(FluentDataGridRow<MWOResponse> row)
    {
        Console.WriteLine($"Row focused: {row.Item?.Name}");
    }
}
